import numpy as np
import networkx as nx
from qiskit_ibm_runtime import QAOA

from qiskit_algorithms.optimizers import COBYLA
from qiskit_algorithms.utils import algorithm_globals
from qiskit_ibm_runtime import QiskitRuntimeService, Sampler, Session
from qiskit_optimization.applications import Maxcut

from code.tasks import cut_max
from code.utils import max_cut_generator_graph


algorithm_globals.random_seed = 42
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞
n = 4
m = 3
G = max_cut_generator_graph.create_weighted_graph(n, m)
edge_labels = {k: f'{float(v):.3f}' for k, v in nx.get_edge_attributes(G, 'weight').items()}
elist = [(*key, int(float(value))) for key, value in edge_labels.items()]

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤–µ—Å–æ–≤
w = np.zeros([n, n])
for i in range(n):
    for j in range(n):
        temp = G.get_edge_data(i, j, default=0)
        if temp != 0:
            w[i, j] = temp["weight"]

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ Max-Cut
max_cut = Maxcut(w)
qp = max_cut.to_quadratic_program()

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Ising Hamiltonian
qubitOp, offset = qp.to_ising()

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IBM Quantum
service = QiskitRuntimeService()
backend = service.least_busy(operational=True, simulator=False)
session = Session(backend=backend)
sampler = Sampler(mode=session)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–∞—Ç–µ–ª—è QAOA
optimizer = COBYLA(maxiter=300)

qaoa = QAOA(sampler=sampler, optimizer=optimizer, reps=2)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
result = qaoa.compute_minimum_eigenvalue(qubitOp)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
x = max_cut.sample_most_likely(result.eigenstate)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("üßÆ Energy:", result.eigenvalue.real)
print("‚è± Optimization time:", result.optimizer_time)
print("üìà Max-Cut objective (adjusted):", result.eigenvalue.real + offset)
print("üß© Bitstring solution:", x)
print("üéØ Cut value (custom):", cut_max.objective_function(elist, x))
print("üéØ Cut value (Qiskit):", qp.objective.evaluate(x))

# --- üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞ ---
print("üñ•Ô∏è Executed on backend:", backend.name)
print(backend.configuration)
print(backend.provider)
print(backend.properties)